#!/usr/bin/env python3
"""
Test script to validate TSLA Trading Bot setup
Run this script to check if all components are properly configured
"""

import os
import sys
import importlib
from datetime import datetime
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_python_version():
    """Test Python version compatibility"""
    print("üêç Testing Python version...")
    
    version = sys.version_info
    if version.major == 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - Compatible")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Requires Python 3.8+")
        return False

def test_required_packages():
    """Test if required packages are installed"""
    print("\nüì¶ Testing required packages...")
    
    required_packages = [
        'pandas',
        'numpy',
        'requests',
        'pytz',
        'colorama',
        'ibapi'
    ]
    
    all_installed = True
    
    for package in required_packages:
        try:
            importlib.import_module(package)
            print(f"‚úÖ {package} - Installed")
        except ImportError:
            print(f"‚ùå {package} - Not installed")
            all_installed = False
    
    return all_installed

def test_environment_variables():
    """Test environment variables"""
    print("\nüîß Testing environment variables...")
    
    # Check for .env file
    env_file_exists = os.path.exists('.env')
    if env_file_exists:
        print("‚úÖ .env file found")
        
        # Load .env file
        try:
            from dotenv import load_dotenv
            load_dotenv()
            print("‚úÖ .env file loaded")
        except ImportError:
            print("‚ö†Ô∏è  python-dotenv not installed, using system environment variables")
    else:
        print("‚ö†Ô∏è  .env file not found, using system environment variables")
    
    # Check required environment variables
    required_vars = {
        'POLYGON_API_KEY': 'Polygon.io API key for market data',
    }
    
    optional_vars = {
        'IBKR_HOST': 'Interactive Brokers host (default: 127.0.0.1)',
        'IBKR_PORT': 'Interactive Brokers port (default: 7497)',
        'ENABLE_TRADING': 'Enable live trading (default: false)',
    }
    
    all_set = True
    
    print("\nRequired variables:")
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value:
            # Mask API keys for security
            display_value = f"{value[:8]}..." if len(value) > 8 else "***"
            print(f"‚úÖ {var} = {display_value}")
        else:
            print(f"‚ùå {var} - Not set ({description})")
            all_set = False
    
    print("\nOptional variables:")
    for var, description in optional_vars.items():
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var} = {value}")
        else:
            print(f"‚ö†Ô∏è  {var} - Not set ({description})")
    
    return all_set

def test_data_connection():
    """Test Polygon.io data connection"""
    print("\nüìä Testing data connection...")
    
    polygon_api_key = os.getenv('POLYGON_API_KEY')
    if not polygon_api_key:
        print("‚ùå Cannot test data connection - POLYGON_API_KEY not set")
        return False
    
    try:
        from live_data_fetcher import PolygonDataFetcher
        
        fetcher = PolygonDataFetcher(polygon_api_key)
        
        # Test getting current price
        current_price = fetcher.get_current_price('TSLA')
        
        if current_price:
            print(f"‚úÖ Data connection successful - TSLA price: ${current_price:.2f}")
            return True
        else:
            print("‚ùå Data connection failed - Could not fetch TSLA price")
            return False
            
    except Exception as e:
        print(f"‚ùå Data connection error: {e}")
        return False

def test_ibkr_connection():
    """Test IBKR connection (optional)"""
    print("\nüè¶ Testing IBKR connection...")
    
    enable_trading = os.getenv('ENABLE_TRADING', 'false').lower() == 'true'
    
    if not enable_trading:
        print("‚ö†Ô∏è  Trading disabled - Skipping IBKR connection test")
        print("   Set ENABLE_TRADING=true to test IBKR connection")
        return True
    
    try:
        from ibkr_interface import IBKRManager
        
        manager = IBKRManager()
        
        # Try to connect (with short timeout)
        host = os.getenv('IBKR_HOST', '127.0.0.1')
        port = int(os.getenv('IBKR_PORT', '7497'))
        
        print(f"   Attempting connection to {host}:{port}...")
        
        if manager.start(host=host, port=port):
            print("‚úÖ IBKR connection successful")
            manager.stop()
            return True
        else:
            print("‚ùå IBKR connection failed")
            print("   Make sure TWS or IB Gateway is running")
            print("   Check API settings are enabled")
            return False
            
    except Exception as e:
        print(f"‚ùå IBKR connection error: {e}")
        return False

def test_strategy_engine():
    """Test strategy engine"""
    print("\nüß† Testing strategy engine...")
    
    try:
        from live_strategy_engine import LiveStrategyEngine, StrategyParams
        import pandas as pd
        import numpy as np
        
        # Create test data
        dates = pd.date_range(start='2024-01-01', periods=100, freq='5T')
        test_data = pd.DataFrame({
            'Open': np.random.uniform(200, 220, 100),
            'High': np.random.uniform(220, 230, 100),
            'Low': np.random.uniform(190, 200, 100),
            'Close': np.random.uniform(200, 220, 100),
            'Volume': np.random.randint(1000, 10000, 100)
        }, index=dates)
        
        # Initialize strategy engine
        params = StrategyParams()
        engine = LiveStrategyEngine(params)
        
        # Test indicator computation
        data_with_indicators = engine.compute_indicators(test_data)
        
        if len(data_with_indicators.columns) > 5:  # Should have more columns with indicators
            print("‚úÖ Strategy engine working - Indicators computed successfully")
            return True
        else:
            print("‚ùå Strategy engine error - Indicators not computed")
            return False
            
    except Exception as e:
        print(f"‚ùå Strategy engine error: {e}")
        return False

def test_terminal_monitor():
    """Test terminal monitor"""
    print("\nüñ•Ô∏è  Testing terminal monitor...")
    
    try:
        from terminal_monitor import TerminalMonitor
        
        monitor = TerminalMonitor()
        monitor.update_bot_status("TESTING")
        
        # Test display update (without starting the monitoring thread)
        monitor.force_update()
        
        print("‚úÖ Terminal monitor working")
        return True
        
    except Exception as e:
        print(f"‚ùå Terminal monitor error: {e}")
        return False

def main():
    """Run all tests"""
    print("TSLA Trading Bot - Setup Validation")
    print("=" * 50)
    print(f"Test started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    tests = [
        ("Python Version", test_python_version),
        ("Required Packages", test_required_packages),
        ("Environment Variables", test_environment_variables),
        ("Data Connection", test_data_connection),
        ("IBKR Connection", test_ibkr_connection),
        ("Strategy Engine", test_strategy_engine),
        ("Terminal Monitor", test_terminal_monitor),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name} - Unexpected error: {e}")
            results.append((test_name, False))
    
    # Summary
    print("\n" + "=" * 50)
    print("TEST SUMMARY")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nResults: {passed}/{total} tests passed")
    
    if passed == total:
        print("\nüéâ All tests passed! Your setup is ready for trading.")
        print("\nNext steps:")
        print("1. Start TWS or IB Gateway (if using live trading)")
        print("2. Run: python tsla_trading_bot.py")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} test(s) failed. Please fix the issues above.")
        print("\nCommon solutions:")
        print("- Install missing packages: pip install -r requirements.txt")
        print("- Set environment variables in .env file")
        print("- Start TWS/Gateway for IBKR connection")
        print("- Check your Polygon.io API key and subscription")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

